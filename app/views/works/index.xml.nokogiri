def dcterms_extent(parent_element, value, options)
  if value
    parent_element['dcterms'].extent({"qkunst:describes"=>options[:describes]}) do
      if options == {}
        value
      else
        parent_element['qkunst'].describes(options[:describes]) if options[:describes]
        parent_element['qkunst'].dimension(options[:dimension]) if options[:dimension]
        parent_element['qkunst'].value(value)
        parent_element['qkunst'].unit(options[:unit]) if options[:unit]
      end
    end
  end
end

def has_name(parent_element, tag, value)
  if value
    parent_element['qkunst'].send(tag) do
      parent_element['dc'].title value.name
      parent_element['qkunst'].id value.id
    end
  end
end

# o = data_container
xml.works(
  'xmlns'=>'https://qkunst.nl/work',
  "xmlns:qkunst"=>"https://qkunst.nl/work",
  "xmlns:dc"=>"http://purl.org/dc/elements/1.1/",
  "xmlns:dcterms"=>"http://purl.org/dc/terms/",
  "xmlns:edm"=>"http://www.europeana.eu/schemas/edm/",
  "xmlns:ore"=>"http://www.openarchives.org/ore/terms/",
  "xmlns:owl"=>"http://www.w3.org/2002/07/owl#",
  "xmlns:rdf"=>"http://www.w3.org/1999/02/22-rdf-syntax-ns#",
  "xmlns:foaf"=>"http://xmlns.com/foaf/0.1/",
  "xmlns:skos"=>"http://www.w3.org/2004/02/skos/core#",
  "xmlns:rdau"=>"http://www.rdaregistry.info/Elements/u/",
  "xmlns:wgs84_pos"=>"http://www.w3.org/2003/01/geo/wgs84_pos#",
  "xmlns:crm"=>"http://www.cidoc-crm.org/cidoc-crm/",
  "xmlns:cc"=>"http://creativecommons.org/ns#",
  'xmlns:xsi'=>'http://www.w3.org/2001/XMLSchema-instance'
) do
  @works.uniq.each do |work|
    xml['edm'].ProvidedCHO do
      xml['dc'].title({unknown: work.title_unknown}, work.title_rendered)
      xml['dcterms'].alternative work.description if work.description
      xml['dc'].description work.public_description

      xml['dc'].identifier({"xsi:scheme"=>"qkunst:stock_number"}, work.stock_number)
      xml['dc'].identifier({"xsi:scheme"=>"qkunst:stock_number_file_safe"}, work.stock_number_file_safe)
      xml['dc'].identifier({"xsi:scheme"=>"qkunst:alt_number_1"}, work.alt_number_1)
      xml['dc'].identifier({"xsi:scheme"=>"qkunst:alt_number_2"}, work.alt_number_2)
      xml['dc'].identifier({"xsi:scheme"=>"qkunst:alt_number_3"}, work.alt_number_3)

      work.artists.each do |author|
        xml['dcterms'].creator do
          xml['edm'].Agent do
            xml['skos'].prefLabel author.search_name
            xml['edm'].begin author.date_of_birth || author.year_of_birth
            xml['edm'].end author.date_of_death || author.year_of_death
            xml['rdau'].P60599 author.date_of_birth || author.year_of_birth
            xml['rdau'].P60598 author.date_of_death || author.year_of_death
            xml['dc'].identifier author.rkd_artist_id
            xml['rdau'].P60594((author.place_of_birth_geoname_id ? {"rdf:resource"=>"http://sws.geonames.org/#{author.place_of_birth_geoname_id}"} : {}), author.place_of_birth)
            xml['rdau'].P60592((author.place_of_death_geoname_id ? {"rdf:resource"=>"http://sws.geonames.org/#{author.place_of_death_geoname_id}"} : {}), author.place_of_death)
            # rdaGr2:biographicalInformation > rdau:P60492
            # rdaGr2:dateOfBirth > rdau:P60599
            # rdaGr2:dateOfDeath > rdau:P60598
            # rdaGr2:dateOfEstablishment > rdau:P60524
            # rdaGr2:dateOfTermination > rdau:P60525
            # rdaGr2:gender > rdau:P60531
            # rdaGr2:professionOrOccupation > rdau:P60468
            # rdaGr2:placeOfBirth > rdau:P60594
            # rdaGr2:placeOfDeath > rdau:P60592
          end
        end
      end

      if @fields_to_expose.include? "location"
        xml['edm'].currentLocation [work.location, work.location_floor, work.location_detail].join(";")
      end

      xml['edm'].isShownBy({"rdf:resource"=>"https://#{request.host}#{work.photo_front.url}"}) if work.photo_front?
      xml['edm'].isShownBy({"rdf:resource"=>"https://#{request.host}#{work.photo_back.url}"}) if work.photo_back?
      xml['edm'].isShownBy({"rdf:resource"=>"https://#{request.host}#{work.photo_detail_1.url}"}) if work.photo_detail_1?
      xml['edm'].isShownBy({"rdf:resource"=>"https://#{request.host}#{work.photo_detail_2.url}"}) if work.photo_detail_2?

      xml['dc'].date({unknown: work.object_creation_year_unknown}, work.object_creation_year)

      xml.medium work.medium.name if work.medium
      xml.print_({unkown: work.print_unknown}, work.print)
      xml.signature_comments({not_present: work.no_signature_present}, work.signature_comments) if @fields_to_expose.include? "signature_comments"

      dcterms_extent(xml, work.frame_width,    {unit: "cm", dimension: "width", describes: "frame"})           if @fields_to_expose.include? "frame_width"
      dcterms_extent(xml, work.frame_depth,    {unit: "cm", dimension: "depth", describes: "frame"})           if @fields_to_expose.include? "frame_depth"
      dcterms_extent(xml, work.frame_diameter, {unit: "cm", dimension: "diameter", describes: "frame"})        if @fields_to_expose.include? "frame_diameter"
      dcterms_extent(xml, work.height,         {unit: "cm", dimension: "height", describes: "work"})           if @fields_to_expose.include? "height"
      dcterms_extent(xml, work.width,          {unit: "cm", dimension: "width", describes: "work"})            if @fields_to_expose.include? "width"
      dcterms_extent(xml, work.depth,          {unit: "cm", dimension: "depth", describes: "work"})            if @fields_to_expose.include? "depth"
      dcterms_extent(xml, work.diameter,       {unit: "cm", dimension: "diameter", describes: "work"})         if @fields_to_expose.include? "diameter"
      dcterms_extent(xml, work.hpd_height,     {unit: "cm", dimension: "height", describes: "outer"})          if @fields_to_expose.include? "hpd_height"
      dcterms_extent(xml, work.hpd_width,      {unit: "cm", dimension: "width", describes: "outer"})           if @fields_to_expose.include? "hpd_width"
      dcterms_extent(xml, work.hpd_depth,      {unit: "cm", dimension: "depth", describes: "outer"})           if @fields_to_expose.include? "hpd_depth"
      dcterms_extent(xml, work.hpd_diameter,   {unit: "cm", dimension: "diameter", describes: "outer"})        if @fields_to_expose.include? "hpd_diameter"

      if @fields_to_expose.include? "cached_tag_list"
        work.public_tag_list.each do | tag |
          xml['dc'].subject tag
        end
      end

      xml['qkunst'].photo_file_name work.hpd_photo_file_name

      if @fields_to_expose.include? "object_categories"
        work.object_categories.not_hidden.each do | tag |
          xml['dc'].type tag.name
        end
      end

      if @fields_to_expose.include? "techniques"
        work.techniques.not_hidden.each do | tag |
          xml['qkunst'].technique tag.name
        end
      end

      if work.locality_geoname_id
        xml['edm'].hasMet({"rdf:resource"=>"http://sws.geonames.org/#{work.locality_geoname_id}/"}, work.geoname_summary.label)
      end

      # TODO: improve 'rdf-ication of values below

      if @fields_to_expose.include? "sources"
        work.sources.each do |source|
          has_name(xml, :source, source)
        end
      end

      has_name(xml, :collection, work.collection) if @fields_to_expose.include? "collection"
      has_name(xml, :condition_work, work.condition_work) if @fields_to_expose.include? "condition_work"
      has_name(xml, :condition_frame, work.condition_frame) if @fields_to_expose.include? "condition_frame"
      has_name(xml, :style, work.style) if @fields_to_expose.include? "style_id"
      has_name(xml, :subset, work.subset) if @fields_to_expose.include? "subset_id"
      has_name(xml, :created_by, work.created_by) if @fields_to_expose.include? "created_by"
      has_name(xml, :medium, work.medium) if @fields_to_expose.include? "medium_id"
      has_name(xml, :placeability, work.placeability) if @fields_to_expose.include? "placeability"
      has_name(xml, :owner, work.owner) if @fields_to_expose.include? "owner"
      has_name(xml, :cluster, work.cluster) if @fields_to_expose.include? "cluster_id"
      has_name(xml, :frame_type, work.frame_type) if @fields_to_expose.include? "frame_type"

      %w[condition_work_comments condition_frame_comments information_back other_comments source_comments grade_within_collection created_at updated_at medium_comments abstract_or_figurative valuation_on internal_comments external_inventory purchased_on main_collection image_rights publish purchase_year inventoried_at refound_at new_found_at price_reference minimum_bid selling_price ].each do |field_name|
        if @fields_to_expose.include? field_name
          field_value = work.send(field_name)
          xml['qkunst'].send(field_name, field_value)  if field_value.presence
        end
      end

      if @fields_to_expose.include? "market_value"
        xml['qkunst'].market_value work.market_value if work.market_value
        xml['qkunst'].market_value_min work.market_value_min if work.market_value_min
        xml['qkunst'].market_value_max work.market_value_max if work.market_value_max
      end
      if @fields_to_expose.include? "replacement_value"
        xml['qkunst'].replacement_value work.replacement_value if work.replacement_value
        xml['qkunst'].replacement_value_min work.replacement_value_min if work.replacement_value_min
        xml['qkunst'].replacement_value_max work.replacement_value_max if work.replacement_value_max
      end

      if @fields_to_expose.include? "purchase_price"
        xml['qkunst'].purchase_price work.purchase_price
        xml['qkunst'].purchase_price_in_eur work.purchase_price_in_eur
        xml['qkunst'].purchase_price_currency_id work.purchase_price_currency_id
      end

      xml['qkunst'].selling_price_minimum_bid_comments work.selling_price_minimum_bid_comments if @fields_to_expose.include? "selling_price_minimum_bid_comments"
    end
  end
end
