# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe CustomReportsController, type: :controller do
  include Devise::Test::ControllerHelpers

  # This should return the minimal set of attributes required to create a valid
  # CustomReport. As you add validations to CustomReport, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {
      title: "kaas",
      collection_id: collections(:collection1).id,
      custom_report_template_id: custom_report_templates(:minimal_custom_report_template).id
    }
    # skip("Add a hash of attributes valid for your model")
  }

  let(:invalid_attributes) {
    skip("Add a hash of attributes invalid for your model")
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # CustomReportsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET #index" do
    it "returns a success response" do
      sign_in users(:admin)
      custom_report = CustomReport.create! valid_attributes
      get :index, params: {collection_id: custom_report.collection_id}, session: valid_session
      expect(response).to be_successful
    end
  end

  describe "GET #show" do
    it "returns a success response" do
      sign_in users(:admin)
      custom_report = CustomReport.create! valid_attributes
      get :show, params: {id: custom_report.to_param, collection_id: custom_report.collection_id}, session: valid_session
      expect(response).to be_successful
    end
  end

  describe "GET #new" do
    it "returns a success response" do
      sign_in users(:admin)
      get :new, params: {collection_id: collections(:collection1).id}, session: valid_session
      expect(response).to be_successful
    end
  end

  describe "GET #edit" do
    it "returns no success response by default" do
      custom_report = CustomReport.create! valid_attributes
      get :edit, params: {id: custom_report.to_param, collection_id: custom_report.collection_id}, session: valid_session
      expect(response).to redirect_to(new_user_session_path)
    end
    it "returns success response when admin" do
      sign_in(users(:admin))
      custom_report = CustomReport.create! valid_attributes
      get :edit, params: {id: custom_report.to_param, collection_id: custom_report.collection_id}, session: valid_session
      expect(response).to be_successful
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new CustomReport" do
        sign_in(users(:admin))
        expect {
          post :create, params: {custom_report: valid_attributes, collection_id: collections(:collection1).id}, session: valid_session
        }.to change(CustomReport, :count).by(1)
      end

      it "redirects to the created custom_report" do
        sign_in(users(:admin))
        post :create, params: {custom_report: valid_attributes, collection_id: collections(:collection1).id}, session: valid_session
        expect(response).to redirect_to(edit_collection_custom_report_path(collections(:collection1), CustomReport.last))
      end
    end

    context "with invalid params" do
      it "returns a success response (i.e. to display the 'new' template)" do
        post :create, params: {custom_report: invalid_attributes}, session: valid_session
        expect(response).to be_successful
      end
    end
  end

  describe "PUT #update" do
    context "with valid params" do
      let(:new_attributes) {
        skip("Add a hash of attributes valid for your model")
      }

      it "updates the requested custom_report" do
        sign_in users(:admin)
        custom_report = CustomReport.create! valid_attributes
        put :update, params: {id: custom_report.to_param, custom_report: new_attributes}, session: valid_session
        custom_report.reload
        skip("Add assertions for updated state")
      end

      it "redirects to the custom_report" do
        sign_in users(:admin)
        custom_report = CustomReport.create! valid_attributes
        put :update, params: {id: custom_report.to_param, custom_report: valid_attributes, collection_id: custom_report.collection_id}, session: valid_session
        expect(response).to redirect_to([custom_report.collection,custom_report])
      end
    end

    context "with invalid params" do
      it "returns a success response (i.e. to display the 'edit' template)" do
        custom_report = CustomReport.create! valid_attributes
        put :update, params: {id: custom_report.to_param, custom_report: invalid_attributes, collection_id: custom_report.collection_id}, session: valid_session
        expect(response).to be_successful
      end
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested custom_report" do
      sign_in users(:admin)
      custom_report = CustomReport.create! valid_attributes
      expect {
        delete :destroy, params: {id: custom_report.to_param, collection_id: custom_report.collection_id}, session: valid_session
      }.to change(CustomReport, :count).by(-1)
    end

    it "redirects to the custom_reports list" do
      sign_in users(:admin)
      custom_report = CustomReport.create! valid_attributes
      delete :destroy, params: {id: custom_report.to_param, collection_id: custom_report.collection_id}, session: valid_session
      expect(response).to redirect_to(collection_custom_reports_url(custom_report.collection))
    end
  end

end
